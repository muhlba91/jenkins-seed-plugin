plugins {
    id 'org.jenkins-ci.jpi' version '0.33.0'
}

description = "Seed Jenkins Plugin"

ext {
    snakeYamlVersion = '1.24'
    lombokVersion = '1.18.8'

    jenkinsMatrixAuthVersion = '2.4.2'
    jenkinsJobDslVersion = '1.74'
    jenkinsEnvInjectVersion = '2.2.0'
    jenkinsEnvInjectLibVersion = '1.29'
    jenkinsCloudBeesFolderVersion = '6.9'
    jenkinsDescriptionSetterVersion = '1.10'
    jenkinsParametrizedTriggerVersion = '2.35.2'

    jenkinsTestHarnessVersion = '2.54'
    jenkinsSymbolAnnotationVersion = '1.20'
    jenkinsJunitVersion = '1.28'
    jenkinsStructsVersion = '1.20'
    jenkinsMatrixProjectVersion = '1.14'
    jenkinsCredentialsVersion = '2.2.1'
    jenkinsGitVersion = '3.11.0'

    mockitoVersion = '2.28.2'
    jgitVersion = '5.4.0.201906121030-r'
}

// FIXME remove again!
repositories {
    mavenCentral()
    maven { url 'http://jcenter.bintray.com' }
    maven { url 'http://repo.jenkins-ci.org/public' }
}

jenkinsPlugin {
    coreVersion = '2.145'
    displayName = 'Seed Jenkins plug-in'
    url = 'http://wiki.jenkins-ci.org/display/JENKINS/Seed+Plugin'
    gitHubUrl = 'https://github.com/jenkinsci/seed-plugin'

    developers {
        developer {
            id 'dcoraboeuf'
            name 'Damien Coraboeuf'
            email 'damien.coraboeuf@gmail.com'
        }
        developer {
            id 'muhlba91'
            name 'Daniel Muehlbachler'
            email 'daniel.muehlbachler@niftyside.com'
        }
    }
}

// Joint compilation (Java + Groovy)
sourceSets {
    main {
        java { srcDirs = [] }
        groovy { srcDir "src/main/groovy" }
    }
    test {
        java { srcDirs = [] }
        groovy { srcDir "src/main/groovy" }
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

dependencies {
    compile "org.yaml:snakeyaml:${snakeYamlVersion}"
    compile "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Jenkins plugins and libraries
    jenkinsPlugins "org.jenkins-ci.plugins:matrix-auth:${jenkinsMatrixAuthVersion}@jar"
    jenkinsPlugins "org.jenkins-ci.plugins:cloudbees-folder:${jenkinsCloudBeesFolderVersion}@jar"
    jenkinsPlugins "org.jenkins-ci.plugins:description-setter:${jenkinsDescriptionSetterVersion}@jar"
    jenkinsPlugins "org.jenkins-ci.plugins:parameterized-trigger:${jenkinsParametrizedTriggerVersion}@jar"
    jenkinsPlugins "org.jenkins-ci.plugins:envinject:${jenkinsEnvInjectVersion}@jar"
    compile "org.jenkins-ci.lib:envinject-lib:${jenkinsEnvInjectLibVersion}"
    // The Job DSL
    jenkinsPlugins "org.jenkins-ci.plugins:job-dsl:${jenkinsJobDslVersion}@jar"
    providedCompile "org.jenkins-ci.plugins:job-dsl-core:${jenkinsJobDslVersion}@jar"
    providedCompile "org.jenkins-ci.plugins:job-dsl:${jenkinsJobDslVersion}@jar"

    // Testing
    // Jenkins Plugins
    jenkinsTest "org.jenkins-ci.main:jenkins-test-harness:${jenkinsTestHarnessVersion}@jar"
    jenkinsTest "org.jenkins-ci:symbol-annotation:${jenkinsSymbolAnnotationVersion}"
    jenkinsTest "org.jenkins-ci.plugins:junit:${jenkinsJunitVersion}@jar"
    jenkinsTest "org.jenkins-ci.plugins:structs:${jenkinsStructsVersion}@jar"
    jenkinsTest "org.jenkins-ci.plugins:matrix-project:${jenkinsMatrixProjectVersion}@jar"
    jenkinsTest "org.jenkins-ci.plugins:envinject:${jenkinsEnvInjectVersion}"
    jenkinsTest "org.jenkins-ci.plugins:credentials:${jenkinsCredentialsVersion}@jar"
    jenkinsTest "org.jenkins-ci.plugins:git:${jenkinsGitVersion}"

    testCompile "org.mockito:mockito-core:${mockitoVersion}"
    testCompile "org.eclipse.jgit:org.eclipse.jgit:${jgitVersion}"
}

// Integration tests
task integrationTest(type: Test) {
    include 'net/nemerosa/jenkins/seed/integration/**'
    include 'net/nemerosa/seed/integration/**'
}

// Exclude the integration tests from the default tests
test {
    exclude 'net/nemerosa/jenkins/seed/integration/**'
    exclude 'net/nemerosa/seed/integration/**'
}

build.dependsOn integrationTest
integrationTest.mustRunAfter test

// Copy of the pipeline demo JAR for some integration tests
task copyPipelineDemo(type: Copy, dependsOn: ':seed-pipeline-demo:jar') {
    from project(':seed-pipeline-demo').tasks.jar
    into project.file('build/integration/repository')
}

integrationTest.dependsOn copyPipelineDemo
